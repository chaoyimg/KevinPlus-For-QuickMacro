package kevin.module.modules.exploit;

import kevin.event.*;
import kevin.module.BooleanValue;
import kevin.module.Module;
import kevin.module.ModuleCategory;
import kevin.utils.RandomUtils;
import net.minecraft.item.ItemSword;
import net.minecraft.network.Packet;
import net.minecraft.network.play.INetHandlerPlayClient;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S32PacketConfirmTransaction;
import org.jetbrains.annotations.NotNull;
import org.lwjgl.input.Keyboard;

import java.util.ArrayList;
import java.util.LinkedList;

public class PacketMender extends Module {
    private int lastSlot;
    private boolean lastSprinting;
    private boolean onpost;
    private static boolean lastResult;
    private final ArrayList<Packet<?>> postpacket = new ArrayList<>();
    private LinkedList<Packet<INetHandlerPlayClient>> inBus = new LinkedList<>();
    private final BooleanValue c09 = new BooleanValue("Mender C09", true);
    private final BooleanValue c0B = new BooleanValue("Mender C0B", true);
    private final BooleanValue c07 = new BooleanValue("Mender FastBtrak", true);
    private final BooleanValue delay = new BooleanValue("NoSlow Delay Normal Packet", true);
    private final BooleanValue c0f = new BooleanValue("Delay C0F", true);
    private final BooleanValue attack = new BooleanValue("Delay Attack", true);
    public PacketMender() {
        super("PacketMender", "Mender u packets", Keyboard.KEY_NONE, ModuleCategory.EXPLOIT);
    }
    @EventTarget
    public final void onWorld(WorldEvent event) {
        this.lastSlot = -1;
        this.lastSprinting = false;
    } @EventTarget
    public final void onUpdate(UpdateEvent e) {
        if (delay.get()){
            if (!onpost){
                for (Packet packet : postpacket) {
                    mc.getNetHandler().getNetworkManager().sendPacket(packet);
                }
                postpacket.clear();
                while (!inBus.isEmpty()) {
                    inBus.poll().processPacket(mc.getNetHandler());
                }
            }
        }
    }
    @EventTarget
    public final void onMotion(MotionEvent e) {
        if (delay.get()){
            onpost =(e.getEventState() == EventState.POST);
        }

    }
    @EventTarget
    public final void onPacket(PacketEvent e) {

        if (delay.get() && mc.thePlayer.getHeldItem().getItem() instanceof ItemSword && (mc.thePlayer.isBlocking())) {
            if (onpost &&  ((e.getPacket() instanceof C09PacketHeldItemChange ||
                    e.getPacket() instanceof C07PacketPlayerDigging || e.getPacket() instanceof C03PacketPlayer
                    || (c0f.get() && e.getPacket() instanceof C0FPacketConfirmTransaction)
                    || (attack.get() && (e.getPacket() instanceof C0APacketAnimation || e.getPacket() instanceof C02PacketUseEntity)))
            )){
                e.cancelEvent();
                postpacket.add(e.getPacket());
            }
            if (e.getPacket() instanceof S32PacketConfirmTransaction) {
                e.cancelEvent();
                inBus.add((Packet<INetHandlerPlayClient>) e.getPacket());
                mc.getNetHandler().getNetworkManager().sendPacket(new C0FPacketConfirmTransaction((int) RandomUtils.nextFloat(102F, 1.00002413E9F), (short) RandomUtils.nextFloat(102F, 1.00002413E9F),true)
                );
            }
        }
        if (c07.get() && e.getPacket() instanceof C07PacketPlayerDigging && ((C07PacketPlayerDigging) e.getPacket()).getStatus() == C07PacketPlayerDigging.Action.STOP_DESTROY_BLOCK) {
            mc.getNetHandler().addToSendQueue(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.ABORT_DESTROY_BLOCK,((C07PacketPlayerDigging) e.getPacket()).getPosition().add(0,500,0), ((C07PacketPlayerDigging) e.getPacket()).getFacing()));
        }
        if (c0B.get() && e.getPacket() instanceof C0BPacketEntityAction) {
            if (((C0BPacketEntityAction)e.getPacket()).getAction() == C0BPacketEntityAction.Action.START_SPRINTING) {
                if (this.lastSprinting) {
                    e.cancelEvent();
                }
                this.lastSprinting = true;
            }
            else if (((C0BPacketEntityAction)e.getPacket()).getAction() == C0BPacketEntityAction.Action.STOP_SPRINTING) {
                if (!this.lastSprinting) {
                    e.cancelEvent();
                }
                this.lastSprinting = false;
            }
        }
        if (c09.get() && e.getPacket() instanceof C09PacketHeldItemChange) {
            final int slot = ((C09PacketHeldItemChange)e.getPacket()).getSlotId();
            if (slot == this.lastSlot && slot != -1) {
                e.cancelEvent();
            }
            this.lastSlot = ((C09PacketHeldItemChange)e.getPacket()).getSlotId();
        }
    }
}

