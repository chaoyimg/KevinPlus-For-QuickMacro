/*
 * This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package kevin.module.modules.exploit

import io.netty.buffer.Unpooled
import kevin.event.EventTarget
import kevin.event.PacketEvent
import kevin.module.ListValue
import kevin.module.Module
import kevin.module.ModuleCategory
import kevin.utils.PacketUtils
import net.minecraft.network.PacketBuffer
import net.minecraft.network.play.client.C17PacketCustomPayload

object ClientSpoof: Module("ClientSpoof", "Let the server think you are using another client.", category = ModuleCategory.EXPLOIT) {
    private val mode = ListValue("Mode", arrayOf("Lunar", "Forge", "LabyMod", "PVP-L", "C-B", "Geyser"), "Lunar")

    @EventTarget
    fun onPacket(event: PacketEvent) {
        val packet = event.packet
        if (packet is C17PacketCustomPayload && packet.channelName.equals("MC|Brand",true)) {
            PacketUtils.sendPacketNoEvent(when(mode.get()) {
                "Forge" -> C17PacketCustomPayload("MC|Brand", (PacketBuffer(Unpooled.buffer())).writeString("FML"))
                "Lunar" -> C17PacketCustomPayload("REGISTER", (PacketBuffer(Unpooled.buffer())).writeString("Lunar-Client"))
                "LabyMod" -> C17PacketCustomPayload("MC|Brand", (PacketBuffer(Unpooled.buffer())).writeString("LMC"))
                "PVP-L" -> C17PacketCustomPayload("MC|Brand", (PacketBuffer(Unpooled.buffer())).writeString("if ("))
                "C-B" -> C17PacketCustomPayload("MC|Brand", (PacketBuffer(Unpooled.buffer())).writeString("CB"))
                "Geyser" -> C17PacketCustomPayload("MC|Brand", (PacketBuffer(Unpooled.buffer())).writeString("Geyser"))
                else -> packet
            })
            event.cancelEvent()
        }
    }

    override val tag: String
        get() = mode.get()
}