/*
 * This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package kevin.module.modules.exploit

import kevin.module.FloatValue
import kevin.module.ListValue
import kevin.module.Module
import kevin.module.ModuleCategory
import net.minecraft.network.play.client.C03PacketPlayer
import java.util.*
import kotlin.math.cos
import kotlin.math.sin

class Clip : Module("Clip", "Allows you to clip through blocks.", category = ModuleCategory.EXPLOIT) {
    private val modeValue = ListValue("Mode", arrayOf("Teleport", "Flag"), "Teleport")
    private val horizontalValue = FloatValue("Horizontal", 0F, -10F, 10F)
    private val verticalValue = FloatValue("Vertical", 5F, -10F, 10F)

    override fun onEnable() {
        val thePlayer = mc.thePlayer ?: return

        val yaw = Math.toRadians(thePlayer.rotationYaw.toDouble())
        val x = -sin(yaw) * horizontalValue.get()
        val z = cos(yaw) * horizontalValue.get()

        when (modeValue.get().lowercase(Locale.getDefault())) {
            "teleport" -> thePlayer.setPosition(
                thePlayer.posX + x, thePlayer.posY + verticalValue.get(),
                thePlayer.posZ + z
            )

            "flag" -> {
                val netHandler = mc.netHandler

                netHandler.addToSendQueue(
                    C03PacketPlayer.C04PacketPlayerPosition(
                        thePlayer.posX,
                        thePlayer.posY, thePlayer.posZ, true
                    )
                )
                netHandler.addToSendQueue(
                    C03PacketPlayer.C04PacketPlayerPosition(
                        0.5, 0.0,
                        0.5, true
                    )
                )
                netHandler.addToSendQueue(
                    C03PacketPlayer.C04PacketPlayerPosition(
                        thePlayer.posX,
                        thePlayer.posY, thePlayer.posZ, true
                    )
                )
                netHandler.addToSendQueue(
                    C03PacketPlayer.C04PacketPlayerPosition(
                        thePlayer.posX + x,
                        thePlayer.posY + verticalValue.get(), thePlayer.posZ + z, true
                    )
                )
                netHandler.addToSendQueue(
                    C03PacketPlayer.C04PacketPlayerPosition(
                        0.5,
                        0.0, 0.5, true
                    )
                )
                netHandler.addToSendQueue(
                    C03PacketPlayer.C04PacketPlayerPosition(
                        thePlayer.posX
                                + 0.5, thePlayer.posY, thePlayer.posZ + 0.5, true
                    )
                )

                thePlayer.setPosition(
                    thePlayer.posX + -sin(yaw) * 0.04, thePlayer.posY,
                    thePlayer.posZ + cos(yaw) * 0.04
                )
            }
        }
        state = false
    }
}