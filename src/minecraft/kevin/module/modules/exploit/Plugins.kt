/*
 * This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package kevin.module.modules.exploit

import joptsimple.internal.Strings
import kevin.event.EventTarget
import kevin.event.PacketEvent
import kevin.event.UpdateEvent
import kevin.module.Module
import kevin.module.ModuleCategory
import kevin.utils.ChatUtils
import kevin.utils.TickTimer
import net.minecraft.network.play.client.C14PacketTabComplete
import net.minecraft.network.play.server.S3APacketTabComplete

class Plugins : Module("Plugins", "Allows you to see which plugins the server is using.", category = ModuleCategory.EXPLOIT) {

    private val tickTimer = TickTimer()

    override fun onEnable() {
        if (mc.thePlayer == null)
            return

        mc.netHandler.addToSendQueue(C14PacketTabComplete("/"))
        tickTimer.reset()
    }

    @EventTarget
    fun onUpdate(event: UpdateEvent) {
        tickTimer.update()

        if(tickTimer.hasTimePassed(20)) {
            ChatUtils.message("§cPlugins check timed out...")
            tickTimer.reset()
            state = false
        }
    }

    @EventTarget
    fun onPacket(event: PacketEvent) {
        if ((event.packet)is S3APacketTabComplete) {
            val s3APacketTabComplete: S3APacketTabComplete = event.packet

            val plugins = ArrayList<String>()
            val commands = s3APacketTabComplete.func_149630_c()

            for (command1 in commands) {
                val command = command1.split(":")

                if (command.size > 1) {
                    val pluginName = command[0].replace("/", "")

                    if (!plugins.contains(pluginName))
                        plugins.add(pluginName)
                }
            }

            plugins.sort()

            if(plugins.isNotEmpty())
                ChatUtils.message("§aPlugins §7(§8" + plugins.size + "§7): §c" + Strings.join(plugins.toArray(arrayOfNulls<String>(0)), "§7, §c"))
            else
                ChatUtils.message("§cNo plugins found.")
            state = false
            tickTimer.reset()
        }
    }
}