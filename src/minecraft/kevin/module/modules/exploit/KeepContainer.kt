/*
 * This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package kevin.module.modules.exploit

import kevin.event.EventTarget
import kevin.event.KeyEvent
import kevin.event.PacketEvent
import kevin.event.ScreenEvent
import kevin.module.Module
import kevin.module.ModuleCategory
import net.minecraft.client.gui.inventory.GuiContainer
import net.minecraft.client.gui.inventory.GuiInventory
import net.minecraft.network.play.client.C0DPacketCloseWindow
import net.minecraft.network.play.server.S2EPacketCloseWindow
import org.lwjgl.input.Keyboard

class KeepContainer : Module("KeepContainer", "Allows you to open a formerly closed inventory container everywhere. (Press INSERT Key to open)", category = ModuleCategory.EXPLOIT) {
    private var container: GuiContainer? = null

    override fun onDisable() {
        if (container != null)
            mc.netHandler.addToSendQueue(C0DPacketCloseWindow(container!!.inventorySlots!!.windowId))

        container = null
    }

    @EventTarget
    fun onGui(event: ScreenEvent) {
        val guiScreen = event.guiScreen

        if ((guiScreen)is GuiContainer && (guiScreen) !is GuiInventory)
            container = guiScreen
    }

    @EventTarget
    fun onKey(event: KeyEvent) {
        if (event.key == Keyboard.KEY_INSERT) {
            if (container == null)
                return

            mc.displayGuiScreen(container)
        }
    }

    @EventTarget
    fun onPacket(event: PacketEvent) {
        if ((event.packet)is C0DPacketCloseWindow)
            event.cancelEvent()
        else if ((event.packet)is S2EPacketCloseWindow) {
            val packetCloseWindow = event.packet

            if (container != null && container!!.inventorySlots != null && packetCloseWindow.windowId == container!!.inventorySlots!!.windowId)
                container = null
        }
    }
}